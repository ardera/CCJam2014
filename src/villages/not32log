local toclear = {}
local notifications = {}
function class(name)
	local cl = 0
	cl = {__parent = "Object", __members = {}, __name = name, __origin = name, __originparent = "Object",
	__relatedto = function(c)
		local cur = cl
		if cur.__origin == c.__origin then
			return true
		end
		while cur.__originparent ~= c.__origin do
			cur = _G[cur.__originparent]
			if cur == nil then
				return false
			end
		end
		return true
	end}
	if name == "Object" then
		cl.__parent = nil
		cl.__originparent = nil
	end
	setmetatable(cl.__members, {__index = _G[cl.__originparent]})
	local cl_mt = {
		__call = function(this, ...)
			-- new instance
			-- call constructor
			
			local instance = {__name = cl.__name, __origin = cl.__name,
			__cast = function(c)
				if instance.__relatedto(c) then
					instance.__name = c.__name
				end
			end, __instanceof = function(c)
				if instance.__origin == c.__name then
					return true
				end
				return false
			end
			}
			instance.super = setmetatable({}, {__call = function(s, ...) if instance.super.init then instance.super.init(instance, ...) end end})
			
			setmetatable(instance, {__index = function(t, k)
				if k == "__parent" then
					if _G[instance.__name] then
						return _G[instance.__name].__parent
					end
					return "Object"
				elseif k == "__originparent" then
					if _G[instance.__origin] then
						return _G[instane.__origin].__parent
					end
					return "Object"
				end
			end})
			
			local function applyClass(classenv)
				if _G[classenv.__parent] then
					applyClass(_G[classenv.__parent])
				end
				for a, b in pairs(classenv.__members) do
					if a ~= "__parent" and a ~= "__members" and a ~= "__name" and a ~= " __origin" and a ~= "__orginparent" then
						instance[a] = b
						if classenv ~= cl then
							instance.super[a] = b
						end
					end
				end
			end
			
						-- track down parents
			applyClass(cl)
			if rawget(cl.__members, "__init") then
				return instance:__init(...)
			end
			if instance.init then
				instance:init(...)
			end
			return instance
		end,
		__newindex = function(t, k, v)
			t.__members[k] = v
		end,
		__index = function(t, k)
			if t.__members[k] then
				return t.__members[k]
			end
		end
	}
	
	setmetatable(cl, cl_mt)
	
	local notify_t = {
		notify = function(s, o, ...)
			if _G[o] then
				_G[o].notification(Notification(cl, ...))
			end
			return notify_t
		end
	}
	
	local def_mt = {
		__call = function(this, arg1)
			-- define the class / publish it
			if _G[cl.__parent] then
				cl.__members = setmetatable(arg1, {__index = _G[cl.__parent].__members})
			else
				cl.__members = arg1
			end
			_G[name] = cl
			toclear[#toclear + 1] = name
			return notify_t
		end
	}
	
	local definer = {
		extend = function(this, parent)
			cl.__parent = parent
			cl.__originparent = parent
			return setmetatable({}, def_mt)
		end
	}
	
	setmetatable(definer, def_mt)
	return definer
end

function clearclasses()
	for a, b in pairs(toclear) do
		_G[b] = nil
	end
end

function check(c, ...)
	local args = {...}
	local should = {}
	for a = 1, #args do
		if type(args[a]) == "table" and args[a].__origin then
			should[#should + 1] = args[a].__origin
		else
			should[#should + 1] = tostring(args[a])
		end
		
		if args[a] == type(c) then
			return true
		elseif type(c) == "table" and c.__originparent and c.__origin and c.__relatedto(args[a]) then
			return true
		end
	end
	error("Wrong Argument Type: Is: " .. tostring((c or {}).__origin) .. " Should Be: " .. table.concat(should, " / "), 2)
end

class "Object" {}
function Object.notification(n) end

class "Notification" {}
function Notification:getSender()
	return self.sender
end
function Notification:getDetails()
	return self.details
end
function Notification:getDetail(n)
	return self.details[n]
end
function Notification:check(n, ...)
	local vargs = {...}
	local ok, err = pcall(function() check(self.details[n], unpack(vargs)) end)
	return ok
end

function Notification:checkSender(...)
	local vargs = {...}
	local ok, err = pcall(function() check(self.sender, unpack(vargs)) end)
	return ok
end

function Notification:init(s, ...)
	self.sender = s
	self.details = {...}
end

--class "Test" {Hey = "Hey"}
--class "SpecificTest" : extend "Test" {}