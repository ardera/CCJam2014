class "Screen" {
	w = ({term.getSize()})[1],
	h = ({term.getSize()})[2]
}

function Screen:draw() end
function Screen:update(event) end

function Screen.setColor(fg, bg)
	if fg then
		term.setTextColor(fg)
	end
	if bg then
		term.setBackgroundColor(bg)
	end
end

function Screen.clear(fg, bg)
	Screen.setColor(fg, bg)
	term.clear()
	term.setCursorPos(1, 1)
end

function Screen.clearRect(sX, sY, eX, eY, fg, bg)
	Screen.setColor(fg, bg)
	for a = math.min(sY, eY), math.max(sY, eY) do
		term.setCursorPos(math.min(sX, eX), a)
		term.write((" "):rep(math.max(sX, eX) - math.min(sX, eX) + 1))
	end
end

function Screen.clearLine(y, sX, eX, fg, bg)
	Screen.setColor(fg, bg)
	term.setCursorPos(math.min(sX, eX), y)
	term.write((" "):rep(math.max(sX, eX) - math.min(sX, eX) + 1))
end

function Screen.combine(...)
	return ScreenCombined(...)
end

function Screen.themedclear()
	Screen.clear(Villages.config.colortheme.text, Villages.config.colortheme.bg)
end

function Screen.getCentredX(str)
	return math.floor(Screen.w / 2 - #str / 2)
end

class "ScreenTest" : extend "Screen" {}

function ScreenTest:draw() Screen.clearRect(1, 1, 5, 5, nil, colors.white) end

class "ScreenCombined" : extend "Screen" {}

function ScreenCombined:init(...)
	self.screens = {...}
end

function ScreenCombined:draw()
	for a = 1, #self.screens do
		self.screens[a]:draw()
	end
end

function ScreenCombined:update(ev)
	for a = 1, #self.screens do
		self.screens[a]:update(ev)
	end
end